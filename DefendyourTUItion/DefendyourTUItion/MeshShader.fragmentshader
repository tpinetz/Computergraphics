#version 330 core
struct Material {
	sampler2D texture_diffuse;
	sampler2D texture_specular;
    float shininess;
}; 

struct DirLight {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;
in vec4 FragPosLightSpace;

out vec4 color;

uniform vec3 viewPos;
uniform sampler2D shadowMap;

uniform vec3 lightColor;
uniform PointLight pointLight; 
uniform DirLight dirLight;
uniform Material material[4];

uniform int nrDiffuseTextures;
uniform int nrSpecularTextures;


// Function prototypes
vec3 CalcDirLight(float shadow, vec4 diffuseColor, vec4 specularColor, DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(float shadow, vec4 diffuseColor, vec4 specularColor, PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
float ShadowCalculation(vec4 fragPosLightSpace, vec3 normal, vec3 lightDir);

void main(){
	vec4 diffuseColor = texture(material[0].texture_diffuse, TexCoords);
	for(int i = 1; i < nrDiffuseTextures; i++)
		diffuseColor =  mix(diffuseColor,texture(material[i].texture_diffuse, TexCoords), 0.5);
	
	
	vec4 specularColor;
	if(nrSpecularTextures > 0 ) {
		specularColor = texture(material[0].texture_specular, TexCoords);
		for(int i = 1; i < nrSpecularTextures; i++)
			specularColor +=  texture(material[i].texture_specular, TexCoords);

		specularColor /= nrSpecularTextures;
	} else {
		specularColor = diffuseColor;
	}
	
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
	vec3 lightDir = normalize(pointLight.position - FragPos);
	float shadow = ShadowCalculation(FragPosLightSpace, norm, lightDir);  

	vec3 result = CalcDirLight(shadow, diffuseColor, specularColor, dirLight, norm, viewDir);
    result += 2*CalcPointLight(shadow, diffuseColor, specularColor, pointLight, norm, FragPos, viewDir); 

	color = vec4(result, 1.0f);

}

float ShadowCalculation(vec4 fragPosLightSpace, vec3 normal, vec3 lightDir)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // Transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // Get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // Get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
	
    // Check whether current frag pos is in shadow
	// PCF
	float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005); 
	float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth  > pcfDepth  ? 1.0 : 0.0;        
        }    
    }

    shadow /= 9.0;
	if(projCoords.z > 1.0)
		shadow = 0.0;
	               
    shadow = min(shadow, 0.75); // reduce shadow strength a little: allow some diffuse/specular light in shadowed regions
    return shadow;
}  

// Calculates the color when using a directional light.
vec3 CalcDirLight(float shadow, vec4 diffuseColor, vec4 specularColor, DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material[0].shininess);
    // Combine results
    vec3 ambient = light.ambient * vec3(diffuseColor);
    vec3 diffuse = light.diffuse * diff * vec3(diffuseColor);
    vec3 specular = light.specular * spec * vec3(specularColor);
    return (ambient + (1.0-shadow) * (diffuse + specular));
}

// Calculates the color when using a point light.
vec3 CalcPointLight(float shadow, vec4 diffuseColor, vec4 specularColor, PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material[0].shininess);
    // Attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // Combine results
    vec3 ambient = light.ambient * vec3(diffuseColor);
    vec3 diffuse = light.diffuse * diff * vec3(diffuseColor);
    vec3 specular = light.specular * spec * vec3(specularColor);
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + (1.0-shadow) * diffuse + specular);
}