#version 330 core
struct Material {
	sampler2D texture_diffuse;
	sampler2D texture_specular;
    float shininess;
}; 

struct DirLight {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;

out vec4 color;

uniform vec3 viewPos;

uniform vec3 lightColor;
uniform PointLight pointLight; 
uniform DirLight dirLight;
uniform Material material[4];

uniform int nrDiffuseTextures;
uniform int nrSpecularTextures;


// Function prototypes
vec3 CalcDirLight(vec4 diffuseColor, vec4 specularColor, DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(vec4 diffuseColor, vec4 specularColor, PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main(){
	vec4 diffuseColor = texture(material[0].texture_diffuse, TexCoords);
	for(int i = 1; i < nrDiffuseTextures; i++)
		diffuseColor =  mix(diffuseColor,texture(material[i].texture_diffuse, TexCoords), 0.5);
	
	
	vec4 specularColor;
	if(nrSpecularTextures > 0 ) {
		specularColor = texture(material[0].texture_specular, TexCoords);
		for(int i = 1; i < nrSpecularTextures; i++)
			specularColor +=  texture(material[i].texture_specular, TexCoords);

		specularColor /= nrSpecularTextures;
	} else {
		specularColor = diffuseColor;
	}

	
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

	vec3 result = CalcDirLight(diffuseColor, specularColor, dirLight, norm, viewDir);
    result += CalcPointLight(diffuseColor, specularColor, pointLight, norm, FragPos, viewDir); 

	color = vec4(result, 1.0f);

}

// Calculates the color when using a directional light.
vec3 CalcDirLight(vec4 diffuseColor, vec4 specularColor, DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material[0].shininess);
    // Combine results
    vec3 ambient = light.ambient * vec3(diffuseColor);
    vec3 diffuse = light.diffuse * diff * vec3(diffuseColor);
    vec3 specular = light.specular * spec * vec3(specularColor);
    return (ambient + diffuse + specular);
}

// Calculates the color when using a point light.
vec3 CalcPointLight(vec4 diffuseColor, vec4 specularColor, PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material[0].shininess);
    // Attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // Combine results
    vec3 ambient = light.ambient * vec3(diffuseColor);
    vec3 diffuse = light.diffuse * diff * vec3(diffuseColor);
    vec3 specular = light.specular * spec * vec3(specularColor);
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}