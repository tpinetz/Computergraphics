 #version 330 core
 struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;    
    float shininess;
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec2 TexCoord;
in vec3 FragPos;
in vec3 Normal;

out vec4 color;

uniform sampler2D ourTexture;
uniform vec3 viewPos;

uniform vec3 lightColor;
uniform Light light; 

void main(){
    vec3 ambient = light.ambient * lightColor;

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - FragPos);  

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * (diff * lightColor);

	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = light.specular * (spec * lightColor);  

	color = vec4((ambient + diffuse + specular), 1.0f) * texture(ourTexture, TexCoord);
}