 #version 330 core
 struct Material {
    sampler2D diffuse;
    sampler2D specular;    
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

	float constant;
    float linear;
    float quadratic;
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoord;

out vec4 color;

uniform Material material;
uniform vec3 viewPos;

uniform Light light; 

void main(){

	float distance    = length(light.position - FragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + 
    		    light.quadratic * (distance * distance)); 

    vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - FragPos);  

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));

	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord));  

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	color = vec4((ambient + diffuse + specular), 1.0f) ;
}